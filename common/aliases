# Create the `?` alias to call alias_list
alias '?'='alias_list'

alias 'lslh'='ls -lh'
alias 'dflh'='df -lh'

############################################################
## Git
############################################################
alias g="git"
alias s="git status"
alias gaa="git add --all"
alias gap='git add -p'
alias gb="git branch"
alias gd="git diff"
alias gt="git tag"
alias gundo="git reset --soft HEAD~1"

alias gup="git pull --rebase --prune"

function gp() {
  local default_branch
  default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed "s@^refs/remotes/origin/@@")
  if [[ -z "$default_branch" ]]; then
    echo "Error: Unable to determine the default branch."
    return 1
  fi

  local branches
  branches=$(git branch --merged "$default_branch" | grep -v "\* $default_branch")
  if [[ -z "$branches" ]]; then
    echo "No branches to delete."
  else
    echo "$branches" | xargs -n 1 git branch -d
  fi

  git remote prune origin
}

alias gpp='gup && gp'

function ga() {
  git add $1
}

function ggg() {
  git commit -v -m "$*"
}

function gm() {
  git merge $1
}

function gpo() {
  if [ -z "$1" ]; then
    local default_branch
    default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed "s@^refs/remotes/origin/@@")
    if [[ -z "$default_branch" ]]; then
      git push origin master
    else
      git push origin $default_branch
    fi
  else
    git push origin $*
  fi
}

alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci)%Creset' --abbrev-commit --date=relative"
alias glst="gl --stat"
alias glsh="git shortlog -sn"

function gco {
  if [ -z "$1" ]; then
    git checkout master
  else
    git checkout $*
  fi
}

# Comedy productivity measure
function gdays() {
  git diff --shortstat "@{$1 days ago}"
}

function gph() {
  if [ -z "$1" ]; then
    git push heroku master
  else
    git push heroku $*
  fi
}

############################################################
## Navigation
############################################################
alias ..="cd .."
alias ...="cd ../.."
alias ,,="cd .."
alias ,,,="cd ../.."


# Go to directory after creating
function take() {
  mkdir -p "$1"
  cd "$1"
}

############################################################
## Public IP Address
############################################################
function myip() {
  local service="https://ifconfig.me"
  local ip

  if command -v curl &>/dev/null; then
    ip=$(curl -s "$service")
  elif command -v wget &>/dev/null; then
    ip=$(wget -qO- "$service")
  else
    echo "Error: Neither curl nor wget is available. Please install one to use this function."
    return 1
  fi

  # Output the IP in green and ensure a newline
  printf "\033[32m%s\033[0m\n" "$ip"
}

############################################################
## VPN
############################################################

alias mva="mullvad account get"
alias mvc="mullvad connect"
alias mvd="mullvad disconnect"
alias mvs="mullvad status"

function mvrs() {
  if [ -z "$1" ]; then
    echo "Usage: mvrs <mullvad-relay-string e.g. gb-glw-wg-001>"
    return 1
  fi
  mullvad relay set location "$1"
}

############################################################
## yt-dlp
############################################################
function yt-subs() {
  yt-dlp \
    --write-subs \
    --skip-download \
    -o "$DOWNLOADS_DIR/%(title)s.%(ext)s" \
    "$@"
}

function yt-down() {
  yt-dlp \
    --write-subs \
    --sub-lang en \
    --sub-format ttml \
    -o "$DOWNLOADS_DIR/%(title)s.%(ext)s" \
    "$@"
}

function yt-form() {
  if [ -z "$1" ]; then
    echo "Usage: yt-formats <url>"
    return 1
  fi
  yt-dlp -F "$1"
}

function yt-fdown() {
  if [ -z "$2" ]; then
    echo "Usage: yt-fdown <url> <format>"
    return 1
  fi
  yt-dlp -f "$2" -o "$DOWNLOADS_DIR/%(title)s.%(ext)s" "$1"
}
